# Long tests: run on commits to master branch/cron builds

language: c
sudo: required
dist: trusty
matrix:
  include:
    # Ubuntu 14.04
    - env: Cmd="make cxxtest && make clean && make gnu90build && make clean && make cmakebuild && make clean && make travis-install"

    - env: Cmd='make gcc6install && CC=gcc-6 make clean uasan-test'
    - env: Cmd='make gcc6install libc6install && CC=gcc-6 make clean uasan-test32'
    - env: Cmd='make clang38install && CC=clang-3.8 make clean msan-test'
    - env: Cmd='make clang38install && CC=clang-3.8 make clean tsan-test-zstream'
    - env: Cmd='make valgrindinstall && make -C tests clean valgrindTest'

    - env: Cmd='make arminstall && make armtest'
    - env: Cmd='make arminstall && make aarch64test'
    - env: Cmd='make ppcinstall && make ppctest'
    - env: Cmd='make ppcinstall && make ppc64test'

    - env: Cmd='make gpp6install valgrindinstall && make -C zlibWrapper test && make -C zlibWrapper valgrindTest'
    - env: Cmd='make gcc6install && CC=gcc-6 make uasan-test-zstd-nolegacy'
    - env: Cmd='make gcc6install && CC=gcc-6 make uasan-test-zbuff'

    - env: Cmd='make -j uasanregressiontest'
    - env: Cmd='make -j msanregressiontest'

    - env: Cmd='make -C tests versionsTest && make lz4install && make clean && make -C tests test-lz4'

    # OS X Mavericks
    - env: Cmd="make test"
      os: osx

before_install:
  - if [ `uname` = "Darwin" ]; then brew update; fi

install:
  - if [ `uname` = "Darwin" ]; then brew install xz; fi

git:
  depth: 1

branches:
  only:
  - dev
  - release
  - master
  - travisTest

addons:
  apt:
    update: true

env:
  global:
    - FUZZERTEST=-T2mn
      ZSTREAM_TESTTIME=-T2mn
      DECODECORPUS_TESTTIME=-T1mn


matrix:
  fast_finish: true
  include:
    - name: arm64    # ~2.5 mn
      os: linux
      arch: arm64
      script:
        - make check

    - name: make test (complete)
      script:
        # DEVNULLRIGHTS : will request sudo rights to test permissions on /dev/null
        - DEVNULLRIGHTS=test make test

    - name: Minimal Decompressor Macros    # ~5mn
      script:
        - make clean && make -j all ZSTD_LIB_MINIFY=1 MOREFLAGS="-Werror"
        - make clean && make check ZSTD_LIB_MINIFY=1 MOREFLAGS="-Werror"
        - make clean && make -j all MOREFLAGS="-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT"
        - make clean && make check MOREFLAGS="-Werror -DHUF_FORCE_DECOMPRESS_X1 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_SHORT"
        - make clean && make -j all MOREFLAGS="-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG"
        - make clean && make check MOREFLAGS="-Werror -DHUF_FORCE_DECOMPRESS_X2 -DZSTD_FORCE_DECOMPRESS_SEQUENCES_LONG"
        - make clean && make -j all MOREFLAGS="-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS"
        - make clean && make check MOREFLAGS="-Werror -DZSTD_NO_INLINE -DZSTD_STRIP_ERROR_STRINGS"

    - name: static analyzer scanbuild    # ~26mn
      dist: trusty  # note : it's important to pin down a version of static analyzer, since different versions report different false positives
      script:
        - make staticAnalyze

    - name: Valgrind + Fuzz Test Stack Mode    # ~ 7mn
      script:
        - make valgrindinstall
        - make -C tests clean valgrindTest
        - make clean
        - make -C tests test-fuzzer-stackmode

    - name: Qemu ARM emulation + Fuzz Test    # ~13.5mn
      script:
        - make arminstall
        - make armfuzz

    # Introduced to check compat with old toolchains, to prevent e.g. #1872
    - name: ARM Build Test (on Trusty)
      dist: trusty
      script:
        - make arminstall
        - make armbuild

    - name: Qemu PPC + Fuzz Test    # ~13mn
      dist: trusty   # it seems ppc cross-compilation fails on "current"
      script:
        - make ppcinstall
        - make ppcfuzz

    # check release number (release only)
    - name: Tag-Specific Test
      if: tag =~ ^v[0-9]\.[0-9]
      script:
        - make -C tests checkTag
        - tests/checkTag "$TRAVIS_BRANCH"

    # tests for release branch and cron job only
    - name: OS-X    # ~13mn
      if: branch = release
      os: osx
      script:
        - make test
        - make -C lib all

    - name: Versions Compatibility Test   # 11.5mn
      if: branch = release
      script:
        - make -C tests versionsTest

    - name: thread sanitizer   # ~29mn
      if: branch = release
      script:
        - make clang38install
        - CC=clang-3.8 make tsan-test-zstream
        - CC=clang-3.8 make tsan-fuzztest

    - name: PPC64LE + Fuzz test  # ~13mn
      if: branch = release
      arch: ppc64le
      script:
        - cat /proc/cpuinfo
        - make test

    - name: Qemu PPC64 + Fuzz test  # ~13mn, presumed Big-Endian (?)
      dist: trusty  # note : PPC64 cross-compilation for Qemu tests seems broken on Xenial
      if: branch = release
      script:
        - make ppcinstall
        - make ppc64fuzz

    # note : we already have aarch64 tests on hardware
    - name: Qemu aarch64 + Fuzz Test (on Xenial)    # ~14mn
      if: branch = release
      dist: xenial
      script:
        - make arminstall
        - make aarch64fuzz

    # meson dedicated test
    - name: Xenial (Meson + clang)    # ~15mn
      if: branch = release
      dist: xenial
      language: cpp
      compiler: clang
      install:
        - sudo apt-get install -qq liblz4-dev valgrind tree
        - |
          travis_retry curl -o ~/ninja.zip -L 'https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip' &&
          unzip ~/ninja.zip -d ~/.local/bin
        - |
          travis_retry curl -o ~/get-pip.py -L 'https://bootstrap.pypa.io/get-pip.py' &&
          python3 ~/get-pip.py --user &&
          pip3 install --user meson
      script:
        - |
          meson setup \
            --buildtype=debugoptimized \
            -Db_lundef=false \
            -Dauto_features=enabled \
            -Dbin_programs=true \
            -Dbin_tests=true \
            -Dbin_contrib=true \
            -Ddefault_library=both \
             build/meson builddir
        - pushd builddir
        - ninja
        - meson test --verbose --no-rebuild
        - DESTDIR=./staging ninja install
        - tree ./staging
      after_failure:
        - cat "$TRAVIS_BUILD_DIR"/builddir/meson-logs/testlog.txt

script:
  - JOB_NUMBER=$(echo $TRAVIS_JOB_NUMBER | sed -e 's:[0-9][0-9]*\.\(.*\):\1:')
  - echo JOB_NUMBER=$JOB_NUMBER TRAVIS_BRANCH=$TRAVIS_BRANCH TRAVIS_EVENT_TYPE=$TRAVIS_EVENT_TYPE TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST
  - export FUZZERTEST=-T3mn;
    export ZSTREAM_TESTTIME=-T80s;
    export DECODECORPUS_TESTTIME=-T40s;
    if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then
        date;
        git fetch origin dev;
        git checkout -f FETCH_HEAD;
        date;
    fi;
    sh -c "$Cmd" || travis_terminate 1;
  allow_failures:
    - env: ALLOW_FAILURES=true
